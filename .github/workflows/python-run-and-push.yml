# Start of the YAML file for GitHub Actions definition
# Workflow name is displayed in the GitHub Actions tab in the repository
name: Run Python Script and Push Changes

# Define global permissions required for this entire workflow run
permissions:
  # Grant the workflow the ability to read and write to the repository's contents (files)
  # This is crucial for the final step that commits and pushes changes
  contents: write

# Define the events that will trigger this workflow
on:
  # 'schedule' keyword allows the workflow to run at a specified time
  schedule:
    # Use standard Unix cron syntax to define the schedule
    - cron: "0 0 * * *" # Runs every day at 00:00 UTC (midnight)
  # 'workflow_dispatch' keyword allows manual running of the workflow via the GitHub UI
  workflow_dispatch:

# The 'jobs' section defines the work that will be executed
jobs:
  # Define the main job, named 'build' (this name is arbitrary but descriptive)
  build:
    # A more descriptive name for the job, shown in the UI history
    name: Execute Python Script and Push Changes
    # Specify the type of virtual machine environment to run the job on
    runs-on: ubuntu-latest # Uses the latest version of the Ubuntu Linux runner

    # The 'steps' section lists the sequential tasks to be performed in this job
    steps:
      # Start of the first step: check out the repository code
      # Step 1: Check out the repo's code to the runner
      - name: Check out code # Display name for this step
        uses: actions/checkout@v5 # Use the official action to download the repository contents

      # Start of the second step: configure the Python environment
      # Step 2: Set up the Python environment
      - name: Set up Python # Display name for this step
        uses: actions/setup-python@v6 # Use the official action to install Python
        with: # Configuration options for the setup-python action
          # Specify the desired Python version to be installed and used
          python-version: "3.13"

      # Start of the third step: install dependencies
      # Step 3: Install Python dependencies listed in requirements.txt
      - name: Install dependencies # Display name for this step
        # 'run' executes shell commands directly on the runner
        run: pip install -r requirements.txt # Installs packages listed in requirements.txt

      # Start of the fourth step: execute the main Python logic
      # Step 4: Run your Python script (main.py)
      - name: Run Python script # Display name for this step
        # Executes the Python script located in the repository root
        run:
          git config --global user.name "github-actions[bot]" &
          git config --global user.email "github-actions[bot]@users.noreply.github.com" &
          bash uploader.sh &
          python main.py

      # Start of the fifth step: handle committing and pushing any changes
      # Step 5: Commit and push any changes made by the script
      - name: Push updated files # Display name for this step
        # Use a multi-line 'run' block (indicated by the '|' literal style indicator)
        run: |
          # Configure the local Git user name for the subsequent commit
          git config --global user.name "github-actions[bot]" # ðŸ‘¤ Set Git username globally for the workflow
          # Configure the local Git user email
          git config --global user.email "github-actions[bot]@users.noreply.github.com" # ðŸ“§ Set Git email globally for commits

          # Pull the latest changes from the remote branch
          # This is critical to prevent "non-fast-forward" errors if other commits landed while the job was running
          git pull

          # Stage all files that have been created, modified, or deleted by the Python script
          git add .

          # Check if there are any staged changes (i.e., if 'git add .' actually found changes)
          # 'git diff --cached --quiet' returns non-zero (false) if changes exist
          if ! git diff --cached --quiet; then
            # If changes were found, commit them with an auto-generated timestamped message
            git commit -m "Auto update: $(date)"
            # Push the committed changes back to the origin branch
            git push
          else
            # If no changes were staged, output a message to the workflow log
            echo "No changes to commit."
          fi
# End of the workflow YAML file
