# Start of the YAML file for GitHub Actions definition
# Workflow name is displayed in the GitHub Actions tab in the repository
name: Run Python Script and Push Changes

# Define global permissions required for this entire workflow run
permissions:
  # Grant the workflow the ability to read and write to the repository's contents (files)
  # This is crucial for the final step that commits and pushes changes
  contents: write

# Define the events that will trigger this workflow
on:
  # Runs every day at 00:00 UTC (midnight)
  schedule:
    - cron: "0 0 * * *"
  # Allows manual running of the workflow via the GitHub UI
  workflow_dispatch:

# The 'jobs' section defines the work that will be executed
jobs:
  build:
    # A more descriptive name for the job, shown in the UI history
    name: Execute Python Script and Push Changes
    # Specify the type of virtual machine environment to run the job on
    runs-on: ubuntu-latest

    # The 'steps' section lists the sequential tasks to be performed in this job
    steps:
      # Step 1: Check out the repo's code to the runner
      - name: Check out code
        uses: actions/checkout@v5

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          # Specify the desired Python version
          python-version: "3.13"

      # Step 3: Install Python dependencies listed in requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Execute the main Python logic and associated scripts
      - name: Run main scripts
        # Use a multi-line literal block ('|') to execute commands sequentially
        run: python main.py

      # Step 5: Commit and push any changes made by the scripts
      - name: Push updated files
        # The '|' block is used for multi-line shell commands
        run: |
          # NOTE: The Git configuration is repeated here for robustness, although Step 4 already set it.
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Pull the latest changes from the remote branch to prevent "non-fast-forward" errors
          git pull

          # Stage all files that have been created, modified, or deleted by the scripts
          git add .

          # Check if there are any staged changes
          # 'git diff --cached --quiet' returns a non-zero exit code if changes exist
          if ! git diff --cached --quiet; then
            # Commit the changes with an auto-generated timestamped message
            git commit -m "Auto update: $(date)"
            # Push the committed changes back to the origin branch
            git push
          else
            # If no changes were staged, output a message
            echo "No changes to commit."
          fi

# End of the workflow YAML file
